-- Tween Generator Pro Plugin for Roblox Studio
-- Bundled version for Argon/Rojo sync
-- All functionality included in single file

-- Plugin variable is provided by Roblox Studio when script runs as Plugin
local TweenService = game:GetService("TweenService")
local Selection = game:GetService("Selection")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Plugin Info
local pluginName = "Tween Generator Pro"
local pluginDescription = "Visual tween animation creator for Roblox Studio"

-- ========================================
-- PROPERTY HANDLER MODULE (bundled)
-- ========================================

local PropertyHandler = {}

-- Define tweenable properties for different object types
local PART_PROPERTIES = {
    Position = {type = "Vector3", default = Vector3.new(0, 0, 0)},
    Size = {type = "Vector3", default = Vector3.new(1, 1, 1)},
    Rotation = {type = "Vector3", default = Vector3.new(0, 0, 0)},
    Transparency = {type = "number", default = 0, min = 0, max = 1},
    Color = {type = "Color3", default = Color3.fromRGB(163, 162, 165)},
    Reflectance = {type = "number", default = 0, min = 0, max = 1},
}

local UI_PROPERTIES = {
    Position = {type = "UDim2", default = UDim2.new(0, 0, 0, 0)},
    Size = {type = "UDim2", default = UDim2.new(0, 100, 0, 100)},
    Rotation = {type = "number", default = 0},
    BackgroundTransparency = {type = "number", default = 0, min = 0, max = 1},
    BackgroundColor3 = {type = "Color3", default = Color3.fromRGB(255, 255, 255)},
    BorderSizePixel = {type = "number", default = 1, min = 0},
}

local TEXTLABEL_PROPERTIES = {
    Position = {type = "UDim2", default = UDim2.new(0, 0, 0, 0)},
    Size = {type = "UDim2", default = UDim2.new(0, 100, 0, 100)},
    Rotation = {type = "number", default = 0},
    BackgroundTransparency = {type = "number", default = 0, min = 0, max = 1},
    BackgroundColor3 = {type = "Color3", default = Color3.fromRGB(255, 255, 255)},
    TextTransparency = {type = "number", default = 0, min = 0, max = 1},
    TextColor3 = {type = "Color3", default = Color3.fromRGB(0, 0, 0)},
    TextStrokeTransparency = {type = "number", default = 1, min = 0, max = 1},
    TextStrokeColor3 = {type = "Color3", default = Color3.fromRGB(0, 0, 0)},
}

function PropertyHandler.GetTweenableProperties(object)
    if not object then return {} end
    
    local className = object.ClassName
    
    -- Part-like objects
    if className == "Part" or className == "WedgePart" or className == "MeshPart" or object:IsA("BasePart") then
        return PART_PROPERTIES
    end
    
    -- UI Objects
    if className == "TextLabel" or className == "TextButton" or className == "TextBox" then
        return TEXTLABEL_PROPERTIES
    end
    
    -- Generic UI element (catch-all for other GUI objects)
    if object:IsA("GuiObject") then
        return UI_PROPERTIES
    end
    
    return {}
end

-- ========================================
-- CODE EXPORTER MODULE (bundled)
-- ========================================

local CodeExporter = {}

function CodeExporter.GenerateCode(targetObject, duration, easingStyle, easingDirection, repeatCount, reverses, delay, goalProperties)
    if not targetObject or not goalProperties or not next(goalProperties) then
        return "-- No valid object or properties specified"
    end
    
    local lines = {}
    
    -- Add header comment
    table.insert(lines, "-- Generated by Tween Generator Pro")
    table.insert(lines, "-- Object: " .. targetObject.Name .. " (" .. targetObject.ClassName .. ")")
    table.insert(lines, "")
    
    -- Add required services
    table.insert(lines, "local TweenService = game:GetService(\"TweenService\")")
    table.insert(lines, "")
    
    -- Add object reference
    local objectPath = CodeExporter.GenerateObjectPath(targetObject)
    table.insert(lines, "-- Reference to the object to tween")
    table.insert(lines, "local targetObject = " .. objectPath)
    table.insert(lines, "")
    
    -- Add TweenInfo creation
    table.insert(lines, "-- Create TweenInfo")
    table.insert(lines, "local tweenInfo = TweenInfo.new(")
    table.insert(lines, "    " .. duration .. ", -- Duration")
    table.insert(lines, "    Enum.EasingStyle." .. easingStyle.Name .. ", -- EasingStyle")
    table.insert(lines, "    Enum.EasingDirection." .. easingDirection.Name .. ", -- EasingDirection")
    table.insert(lines, "    " .. repeatCount .. ", -- RepeatCount")
    table.insert(lines, "    " .. tostring(reverses) .. ", -- Reverses")
    table.insert(lines, "    " .. delay .. " -- DelayTime")
    table.insert(lines, ")")
    table.insert(lines, "")
    
    -- Add goal properties
    table.insert(lines, "-- Goal properties")
    table.insert(lines, "local goals = {")
    
    for propertyName, value in pairs(goalProperties) do
        local valueString = CodeExporter.ValueToString(value)
        table.insert(lines, "    " .. propertyName .. " = " .. valueString .. ",")
    end
    
    table.insert(lines, "}")
    table.insert(lines, "")
    
    -- Add tween creation and play
    table.insert(lines, "-- Create and play the tween")
    table.insert(lines, "local tween = TweenService:Create(targetObject, tweenInfo, goals)")
    table.insert(lines, "tween:Play()")
    
    return table.concat(lines, "\n")
end

function CodeExporter.GenerateObjectPath(object)
    if not object then return "nil" end
    
    local workspace = game:GetService("Workspace")
    local starterGui = game:GetService("StarterGui")
    
    -- Check if object is in Workspace
    if object:IsDescendantOf(workspace) then
        return "game.Workspace." .. object.Name
    end
    
    -- Check if object is in StarterGui
    if object:IsDescendantOf(starterGui) then
        return "game:GetService(\"StarterGui\")." .. object.Name
    end
    
    -- Default to script.Parent assumption
    return "script.Parent -- Adjust this path to your object"
end

function CodeExporter.ValueToString(value)
    local valueType = typeof(value)
    
    if valueType == "Vector3" then
        return string.format("Vector3.new(%.3f, %.3f, %.3f)", value.X, value.Y, value.Z)
    elseif valueType == "UDim2" then
        return string.format("UDim2.new(%.3f, %d, %.3f, %d)", 
            value.X.Scale, value.X.Offset, value.Y.Scale, value.Y.Offset)
    elseif valueType == "Color3" then
        local r = math.floor(value.R * 255 + 0.5)
        local g = math.floor(value.G * 255 + 0.5)
        local b = math.floor(value.B * 255 + 0.5)
        return string.format("Color3.fromRGB(%d, %d, %d)", r, g, b)
    elseif valueType == "number" then
        return tostring(value)
    elseif valueType == "boolean" then
        return tostring(value)
    else
        return "nil -- Unsupported type: " .. valueType
    end
end

-- ========================================
-- PRESET MANAGER MODULE (bundled)
-- ========================================

local PresetManager = {}
local PRESETS_KEY = "TweenGeneratorPro_Presets"

function PresetManager.SavePreset(plugin, presetName, presetData)
    if not plugin or not presetName or not presetData then
        return false
    end
    
    local presets = PresetManager.GetAllPresets(plugin)
    presets[presetName] = presetData
    
    local success = pcall(function()
        local serializedPresets = HttpService:JSONEncode(presets)
        plugin:SetSetting(PRESETS_KEY, serializedPresets)
    end)
    
    return success
end

function PresetManager.GetAllPresets(plugin)
    if not plugin then return {} end
    
    local success, presetsJson = pcall(function()
        return plugin:GetSetting(PRESETS_KEY)
    end)
    
    if not success or not presetsJson then
        return {}
    end
    
    local success2, presets = pcall(function()
        return HttpService:JSONDecode(presetsJson)
    end)
    
    return (success2 and type(presets) == "table") and presets or {}
end

-- ========================================
-- MAIN UI MODULE (bundled)
-- ========================================

local TweenGeneratorUI = {}
TweenGeneratorUI.__index = TweenGeneratorUI

function TweenGeneratorUI.new(widget, plugin)
    local self = setmetatable({}, TweenGeneratorUI)
    
    self.widget = widget
    self.plugin = plugin
    self.selectedObject = nil
    self.currentTween = nil
    self.originalProperties = {}
    
    -- Tween settings
    self.duration = 1
    self.delay = 0
    self.repeatCount = 0
    self.reverses = false
    self.easingStyle = Enum.EasingStyle.Sine
    self.easingDirection = Enum.EasingDirection.Out
    
    -- Property values
    self.startProperties = {}
    self.endProperties = {}
    
    self:CreateUI()
    self:ConnectEvents()
    
    return self
end

function TweenGeneratorUI:CreateUI()
    -- Main frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(1, 0, 1, 0)
    mainFrame.BackgroundColor3 = Color3.fromRGB(46, 46, 46)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = self.widget
    
    -- Create scroll frame
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ScrollFrame"
    scrollFrame.Size = UDim2.new(1, -20, 1, -20)
    scrollFrame.Position = UDim2.new(0, 10, 0, 10)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.ScrollBarThickness = 8
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 900)
    scrollFrame.Parent = mainFrame
    
    -- Create sections
    self:CreateObjectSelectionSection(scrollFrame)
    self:CreatePropertySection(scrollFrame)
    self:CreateTweenControlsSection(scrollFrame)
    self:CreatePreviewSection(scrollFrame)
    self:CreateExportSection(scrollFrame)
    self:CreatePresetSection(scrollFrame)
    
    self.mainFrame = mainFrame
    self.scrollFrame = scrollFrame
end

function TweenGeneratorUI:CreateObjectSelectionSection(parent)
    local section = self:CreateSection("Object Selection", parent, 0)
    
    -- Object info label
    self.objectInfoLabel = Instance.new("TextLabel")
    self.objectInfoLabel.Size = UDim2.new(1, -120, 0, 30)
    self.objectInfoLabel.Position = UDim2.new(0, 10, 0, 30)
    self.objectInfoLabel.BackgroundTransparency = 1
    self.objectInfoLabel.Text = "No object selected"
    self.objectInfoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.objectInfoLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.objectInfoLabel.Parent = section
    
    -- Refresh button
    local refreshButton = Instance.new("TextButton")
    refreshButton.Size = UDim2.new(0, 100, 0, 30)
    refreshButton.Position = UDim2.new(1, -110, 0, 30)
    refreshButton.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
    refreshButton.BorderSizePixel = 0
    refreshButton.Text = "Refresh"
    refreshButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    refreshButton.Parent = section
    
    refreshButton.MouseButton1Click:Connect(function()
        self:RefreshSelectedObject()
    end)
    
    section.Size = UDim2.new(1, -20, 0, 80)
end

function TweenGeneratorUI:CreatePropertySection(parent)
    local section = self:CreateSection("Properties", parent, 90)
    
    self.propertyFrame = Instance.new("Frame")
    self.propertyFrame.Size = UDim2.new(1, -20, 0, 200)
    self.propertyFrame.Position = UDim2.new(0, 10, 0, 30)
    self.propertyFrame.BackgroundTransparency = 1
    self.propertyFrame.Parent = section
    
    section.Size = UDim2.new(1, -20, 0, 250)
end

function TweenGeneratorUI:CreateTweenControlsSection(parent)
    local section = self:CreateSection("Tween Settings", parent, 350)
    
    local yPos = 30
    
    -- Duration
    yPos = self:CreateNumberInput(section, "Duration", self.duration, function(value)
        self.duration = value
    end, yPos)
    
    -- Delay
    yPos = self:CreateNumberInput(section, "Delay", self.delay, function(value)
        self.delay = value
    end, yPos)
    
    -- Repeat Count
    yPos = self:CreateNumberInput(section, "Repeat Count", self.repeatCount, function(value)
        self.repeatCount = math.max(0, math.floor(value))
    end, yPos)
    
    -- Reverses toggle
    local reversesLabel = Instance.new("TextLabel")
    reversesLabel.Size = UDim2.new(0.5, -10, 0, 25)
    reversesLabel.Position = UDim2.new(0, 10, 0, yPos)
    reversesLabel.BackgroundTransparency = 1
    reversesLabel.Text = "Reverses:"
    reversesLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    reversesLabel.TextXAlignment = Enum.TextXAlignment.Left
    reversesLabel.Parent = section
    
    local reversesToggle = Instance.new("TextButton")
    reversesToggle.Size = UDim2.new(0.5, -15, 0, 25)
    reversesToggle.Position = UDim2.new(0.5, 5, 0, yPos)
    reversesToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    reversesToggle.BorderSizePixel = 0
    reversesToggle.Text = "false"
    reversesToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    reversesToggle.Parent = section
    
    reversesToggle.MouseButton1Click:Connect(function()
        self.reverses = not self.reverses
        reversesToggle.Text = tostring(self.reverses)
        reversesToggle.BackgroundColor3 = self.reverses and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(25, 25, 25)
    end)
    
    yPos = yPos + 35
    
    -- Easing Style dropdown (simplified)
    local easingLabel = Instance.new("TextLabel")
    easingLabel.Size = UDim2.new(0.5, -10, 0, 25)
    easingLabel.Position = UDim2.new(0, 10, 0, yPos)
    easingLabel.BackgroundTransparency = 1
    easingLabel.Text = "Easing Style:"
    easingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    easingLabel.TextXAlignment = Enum.TextXAlignment.Left
    easingLabel.Parent = section
    
    local easingDropdown = Instance.new("TextButton")
    easingDropdown.Size = UDim2.new(0.5, -15, 0, 25)
    easingDropdown.Position = UDim2.new(0.5, 5, 0, yPos)
    easingDropdown.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    easingDropdown.BorderSizePixel = 0
    easingDropdown.Text = "Sine"
    easingDropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    easingDropdown.Parent = section
    
    local easingStyles = {"Linear", "Sine", "Back", "Bounce", "Elastic", "Exponential", "Quad"}
    local currentEasingIndex = 2
    
    easingDropdown.MouseButton1Click:Connect(function()
        currentEasingIndex = currentEasingIndex + 1
        if currentEasingIndex > #easingStyles then
            currentEasingIndex = 1
        end
        local selectedStyle = easingStyles[currentEasingIndex]
        easingDropdown.Text = selectedStyle
        self.easingStyle = Enum.EasingStyle[selectedStyle]
    end)
    
    section.Size = UDim2.new(1, -20, 0, yPos + 35)
end

function TweenGeneratorUI:CreatePreviewSection(parent)
    local section = self:CreateSection("Preview", parent, 490)
    
    -- Preview button
    local previewButton = Instance.new("TextButton")
    previewButton.Size = UDim2.new(0, 150, 0, 40)
    previewButton.Position = UDim2.new(0, 10, 0, 30)
    previewButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
    previewButton.BorderSizePixel = 0
    previewButton.Text = "Preview Tween"
    previewButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    previewButton.Parent = section
    
    -- Stop button
    local stopButton = Instance.new("TextButton")
    stopButton.Size = UDim2.new(0, 100, 0, 40)
    stopButton.Position = UDim2.new(0, 170, 0, 30)
    stopButton.BackgroundColor3 = Color3.fromRGB(244, 67, 54)
    stopButton.BorderSizePixel = 0
    stopButton.Text = "Stop"
    stopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopButton.Parent = section
    
    previewButton.MouseButton1Click:Connect(function()
        self:PreviewTween()
    end)
    
    stopButton.MouseButton1Click:Connect(function()
        self:StopPreview()
    end)
    
    section.Size = UDim2.new(1, -20, 0, 90)
end

function TweenGeneratorUI:CreateExportSection(parent)
    local section = self:CreateSection("Export Code", parent, 590)
    
    -- Export button
    local exportButton = Instance.new("TextButton")
    exportButton.Size = UDim2.new(1, -20, 0, 40)
    exportButton.Position = UDim2.new(0, 10, 0, 30)
    exportButton.BackgroundColor3 = Color3.fromRGB(255, 152, 0)
    exportButton.BorderSizePixel = 0
    exportButton.Text = "Copy Code to Clipboard"
    exportButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    exportButton.Parent = section
    
    exportButton.MouseButton1Click:Connect(function()
        self:ExportCode()
    end)
    
    section.Size = UDim2.new(1, -20, 0, 90)
end

function TweenGeneratorUI:CreatePresetSection(parent)
    local section = self:CreateSection("Presets", parent, 690)
    
    -- Preset name input
    local presetNameInput = Instance.new("TextBox")
    presetNameInput.Size = UDim2.new(0.6, -10, 0, 30)
    presetNameInput.Position = UDim2.new(0, 10, 0, 30)
    presetNameInput.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    presetNameInput.BorderSizePixel = 0
    presetNameInput.Text = "My Preset"
    presetNameInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    presetNameInput.PlaceholderText = "Preset name..."
    presetNameInput.Parent = section
    
    -- Save preset button
    local savePresetButton = Instance.new("TextButton")
    savePresetButton.Size = UDim2.new(0.4, -15, 0, 30)
    savePresetButton.Position = UDim2.new(0.6, 5, 0, 30)
    savePresetButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
    savePresetButton.BorderSizePixel = 0
    savePresetButton.Text = "Save Preset"
    savePresetButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    savePresetButton.Parent = section
    
    savePresetButton.MouseButton1Click:Connect(function()
        if presetNameInput.Text ~= "" then
            self:SavePreset(presetNameInput.Text)
        end
    end)
    
    section.Size = UDim2.new(1, -20, 0, 80)
end

function TweenGeneratorUI:CreateSection(title, parent, yPosition)
    local section = Instance.new("Frame")
    section.Name = title
    section.Size = UDim2.new(1, -20, 0, 100)
    section.Position = UDim2.new(0, 10, 0, yPosition)
    section.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    section.BorderSizePixel = 0
    section.Parent = parent
    
    -- Section title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -20, 0, 25)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = section
    
    return section
end

function TweenGeneratorUI:CreateNumberInput(parent, label, defaultValue, callback, yPos)
    local labelObj = Instance.new("TextLabel")
    labelObj.Size = UDim2.new(0.5, -10, 0, 25)
    labelObj.Position = UDim2.new(0, 10, 0, yPos)
    labelObj.BackgroundTransparency = 1
    labelObj.Text = label .. ":"
    labelObj.TextColor3 = Color3.fromRGB(255, 255, 255)
    labelObj.TextXAlignment = Enum.TextXAlignment.Left
    labelObj.Parent = parent
    
    local input = Instance.new("TextBox")
    input.Size = UDim2.new(0.5, -15, 0, 25)
    input.Position = UDim2.new(0.5, 5, 0, yPos)
    input.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    input.BorderSizePixel = 0
    input.Text = tostring(defaultValue)
    input.TextColor3 = Color3.fromRGB(255, 255, 255)
    input.Parent = parent
    
    input.FocusLost:Connect(function()
        local value = tonumber(input.Text)
        if value then
            callback(value)
        else
            input.Text = tostring(defaultValue)
        end
    end)
    
    return yPos + 35
end

function TweenGeneratorUI:ConnectEvents()
    Selection.SelectionChanged:Connect(function()
        self:RefreshSelectedObject()
    end)
end

function TweenGeneratorUI:RefreshSelectedObject()
    local selected = Selection:Get()
    if #selected > 0 then
        self.selectedObject = selected[1]
        self.objectInfoLabel.Text = "Selected: " .. self.selectedObject.Name .. " (" .. self.selectedObject.ClassName .. ")"
        self:UpdatePropertyInputs()
    else
        self.selectedObject = nil
        self.objectInfoLabel.Text = "No object selected"
        self:ClearPropertyInputs()
    end
end

function TweenGeneratorUI:UpdatePropertyInputs()
    if not self.selectedObject then return end
    
    self:ClearPropertyInputs()
    
    local properties = PropertyHandler.GetTweenableProperties(self.selectedObject)
    local yPos = 10
    
    for propertyName, propertyInfo in pairs(properties) do
        yPos = self:CreatePropertyInput(propertyName, propertyInfo, yPos)
    end
    
    self.propertyFrame.Size = UDim2.new(1, -20, 0, yPos)
    
    -- Auto-populate current values
    self:PopulateCurrentValues()
end

function TweenGeneratorUI:ClearPropertyInputs()
    for _, child in pairs(self.propertyFrame:GetChildren()) do
        child:Destroy()
    end
end

function TweenGeneratorUI:PopulateCurrentValues()
    if not self.selectedObject then return end
    
    local properties = PropertyHandler.GetTweenableProperties(self.selectedObject)
    
    for propertyName, propertyInfo in pairs(properties) do
        local currentValue = self.selectedObject[propertyName]
        if currentValue then
            self:SetPropertyInputValue(propertyName, propertyInfo.type, currentValue)
        end
    end
end

function TweenGeneratorUI:SetPropertyInputValue(propertyName, valueType, value)
    if valueType == "Vector3" then
        local xInput = self.propertyFrame:FindFirstChild(propertyName .. "X")
        local yInput = self.propertyFrame:FindFirstChild(propertyName .. "Y")
        local zInput = self.propertyFrame:FindFirstChild(propertyName .. "Z")
        if xInput then xInput.Text = string.format("%.3f", value.X) end
        if yInput then yInput.Text = string.format("%.3f", value.Y) end
        if zInput then zInput.Text = string.format("%.3f", value.Z) end
    elseif valueType == "UDim2" then
        local scaleXInput = self.propertyFrame:FindFirstChild(propertyName .. "ScaleX")
        local offsetXInput = self.propertyFrame:FindFirstChild(propertyName .. "OffsetX")
        local scaleYInput = self.propertyFrame:FindFirstChild(propertyName .. "ScaleY")
        local offsetYInput = self.propertyFrame:FindFirstChild(propertyName .. "OffsetY")
        if scaleXInput then scaleXInput.Text = string.format("%.3f", value.X.Scale) end
        if offsetXInput then offsetXInput.Text = tostring(value.X.Offset) end
        if scaleYInput then scaleYInput.Text = string.format("%.3f", value.Y.Scale) end
        if offsetYInput then offsetYInput.Text = tostring(value.Y.Offset) end
    elseif valueType == "Color3" then
        local rInput = self.propertyFrame:FindFirstChild(propertyName .. "R")
        local gInput = self.propertyFrame:FindFirstChild(propertyName .. "G")
        local bInput = self.propertyFrame:FindFirstChild(propertyName .. "B")
        if rInput then rInput.Text = tostring(math.floor(value.R * 255 + 0.5)) end
        if gInput then gInput.Text = tostring(math.floor(value.G * 255 + 0.5)) end
        if bInput then bInput.Text = tostring(math.floor(value.B * 255 + 0.5)) end
    elseif valueType == "number" then
        local valueInput = self.propertyFrame:FindFirstChild(propertyName .. "Value")
        if valueInput then valueInput.Text = string.format("%.3f", value) end
    end
    
    -- Store the current value and update status
    if not self.endProperties then self.endProperties = {} end
    self.endProperties[propertyName] = value
    self:UpdatePropertyStatus(propertyName, true)
end

function TweenGeneratorUI:CreatePropertyInput(propertyName, propertyInfo, yPos)
    -- Property label with status indicator
    local propertyLabel = Instance.new("TextLabel")
    propertyLabel.Size = UDim2.new(1, -30, 0, 20)
    propertyLabel.Position = UDim2.new(0, 0, 0, yPos)
    propertyLabel.BackgroundTransparency = 1
    propertyLabel.Text = propertyName
    propertyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    propertyLabel.TextXAlignment = Enum.TextXAlignment.Left
    propertyLabel.Font = Enum.Font.SourceSansBold
    propertyLabel.Parent = self.propertyFrame
    
    -- Status indicator
    local statusIndicator = Instance.new("TextLabel")
    statusIndicator.Name = propertyName .. "Status"
    statusIndicator.Size = UDim2.new(0, 20, 0, 20)
    statusIndicator.Position = UDim2.new(1, -25, 0, yPos)
    statusIndicator.BackgroundTransparency = 1
    statusIndicator.Text = "○"
    statusIndicator.TextColor3 = Color3.fromRGB(100, 100, 100)
    statusIndicator.TextXAlignment = Enum.TextXAlignment.Center
    statusIndicator.Font = Enum.Font.SourceSansBold
    statusIndicator.Parent = self.propertyFrame
    
    yPos = yPos + 25
    
    -- Create simple input based on property type
    if propertyInfo.type == "Vector3" then
        yPos = self:CreateVector3Input(propertyName, yPos)
    elseif propertyInfo.type == "UDim2" then
        yPos = self:CreateUDim2Input(propertyName, yPos)
    elseif propertyInfo.type == "Color3" then
        yPos = self:CreateColor3Input(propertyName, yPos)
    elseif propertyInfo.type == "number" then
        yPos = self:CreateSingleNumberInput(propertyName, yPos)
    end
    
    return yPos + 10
end

function TweenGeneratorUI:CreateVector3Input(propertyName, yPos)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 25)
    container.Position = UDim2.new(0, 0, 0, yPos)
    container.BackgroundTransparency = 1
    container.Parent = self.propertyFrame
    
    -- X, Y, Z inputs
    for i, axis in ipairs({"X", "Y", "Z"}) do
        local input = Instance.new("TextBox")
        input.Name = propertyName .. axis
        input.Size = UDim2.new(0.3, -5, 1, 0)
        input.Position = UDim2.new((i-1) * 0.33, (i-1) * 5, 0, 0)
        input.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        input.BorderSizePixel = 0
        input.Text = ""
        input.TextColor3 = Color3.fromRGB(255, 255, 255)
        input.PlaceholderText = axis .. " (e.g. 0)"
        input.Parent = container
        
        input.FocusLost:Connect(function()
            self:UpdatePropertyValue(propertyName, "Vector3")
        end)
    end
    
    return yPos + 30
end

function TweenGeneratorUI:CreateUDim2Input(propertyName, yPos)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 25)
    container.Position = UDim2.new(0, 0, 0, yPos)
    container.BackgroundTransparency = 1
    container.Parent = self.propertyFrame
    
    -- Scale X, Offset X, Scale Y, Offset Y inputs
    for i, component in ipairs({"ScaleX", "OffsetX", "ScaleY", "OffsetY"}) do
        local input = Instance.new("TextBox")
        input.Name = propertyName .. component
        input.Size = UDim2.new(0.24, -2, 1, 0)
        input.Position = UDim2.new((i-1) * 0.25, (i-1) * 2, 0, 0)
        input.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        input.BorderSizePixel = 0
        input.Text = ""
        input.TextColor3 = Color3.fromRGB(255, 255, 255)
        input.PlaceholderText = component
        input.Parent = container
        
        input.FocusLost:Connect(function()
            self:UpdatePropertyValue(propertyName, "UDim2")
        end)
    end
    
    return yPos + 30
end

function TweenGeneratorUI:CreateColor3Input(propertyName, yPos)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 25)
    container.Position = UDim2.new(0, 0, 0, yPos)
    container.BackgroundTransparency = 1
    container.Parent = self.propertyFrame
    
    -- R, G, B inputs
    for i, channel in ipairs({"R", "G", "B"}) do
        local input = Instance.new("TextBox")
        input.Name = propertyName .. channel
        input.Size = UDim2.new(0.3, -5, 1, 0)
        input.Position = UDim2.new((i-1) * 0.33, (i-1) * 5, 0, 0)
        input.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        input.BorderSizePixel = 0
        input.Text = ""
        input.TextColor3 = Color3.fromRGB(255, 255, 255)
        input.PlaceholderText = channel .. " (0-255)"
        input.Parent = container
        
        input.FocusLost:Connect(function()
            self:UpdatePropertyValue(propertyName, "Color3")
        end)
    end
    
    return yPos + 30
end

function TweenGeneratorUI:CreateSingleNumberInput(propertyName, yPos)
    local input = Instance.new("TextBox")
    input.Name = propertyName .. "Value"
    input.Size = UDim2.new(1, 0, 0, 25)
    input.Position = UDim2.new(0, 0, 0, yPos)
    input.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    input.BorderSizePixel = 0
    input.Text = ""
    input.TextColor3 = Color3.fromRGB(255, 255, 255)
    input.PlaceholderText = "Value (e.g. 0.5)"
    input.Parent = self.propertyFrame
    
    input.FocusLost:Connect(function()
        self:UpdatePropertyValue(propertyName, "number")
    end)
    
    return yPos + 30
end

function TweenGeneratorUI:UpdatePropertyValue(propertyName, valueType)
    if not self.endProperties then self.endProperties = {} end
    
    local value
    if valueType == "Vector3" then
        local xInput = self.propertyFrame:FindFirstChild(propertyName .. "X")
        local yInput = self.propertyFrame:FindFirstChild(propertyName .. "Y")
        local zInput = self.propertyFrame:FindFirstChild(propertyName .. "Z")
        
        local x = tonumber(xInput and xInput.Text) 
        local y = tonumber(yInput and yInput.Text) 
        local z = tonumber(zInput and zInput.Text) 
        
        -- Only create value if all components are valid numbers
        if x and y and z then
            value = Vector3.new(x, y, z)
        else
            return -- Don't update if invalid
        end
    elseif valueType == "UDim2" then
        local scaleXInput = self.propertyFrame:FindFirstChild(propertyName .. "ScaleX")
        local offsetXInput = self.propertyFrame:FindFirstChild(propertyName .. "OffsetX")
        local scaleYInput = self.propertyFrame:FindFirstChild(propertyName .. "ScaleY")
        local offsetYInput = self.propertyFrame:FindFirstChild(propertyName .. "OffsetY")
        
        local scaleX = tonumber(scaleXInput and scaleXInput.Text)
        local offsetX = tonumber(offsetXInput and offsetXInput.Text)
        local scaleY = tonumber(scaleYInput and scaleYInput.Text)
        local offsetY = tonumber(offsetYInput and offsetYInput.Text)
        
        if scaleX and offsetX and scaleY and offsetY then
            value = UDim2.new(scaleX, offsetX, scaleY, offsetY)
        else
            return
        end
    elseif valueType == "Color3" then
        local rInput = self.propertyFrame:FindFirstChild(propertyName .. "R")
        local gInput = self.propertyFrame:FindFirstChild(propertyName .. "G")
        local bInput = self.propertyFrame:FindFirstChild(propertyName .. "B")
        
        local r = tonumber(rInput and rInput.Text)
        local g = tonumber(gInput and gInput.Text)
        local b = tonumber(bInput and bInput.Text)
        
        if r and g and b then
            -- Clamp values to 0-255 range
            r = math.clamp(r, 0, 255)
            g = math.clamp(g, 0, 255)
            b = math.clamp(b, 0, 255)
            value = Color3.fromRGB(r, g, b)
        else
            return
        end
    elseif valueType == "number" then
        local valueInput = self.propertyFrame:FindFirstChild(propertyName .. "Value")
        local numValue = tonumber(valueInput and valueInput.Text)
        
        if numValue then
            value = numValue
        else
            return
        end
    end
    
    if value then
        self.endProperties[propertyName] = value
        self:UpdatePropertyStatus(propertyName, true)
    end
end

function TweenGeneratorUI:PreviewTween()
    if not self.selectedObject then
        warn("No object selected for preview")
        return
    end
    
    self:StopPreview()
    self:SaveOriginalProperties()
    
    local tweenInfo = TweenInfo.new(
        self.duration,
        self.easingStyle,
        self.easingDirection,
        self.repeatCount,
        self.reverses,
        self.delay
    )
    
    local goals = {}
    for propertyName, value in pairs(self.endProperties) do
        goals[propertyName] = value
    end
    
    if next(goals) then
        self.currentTween = TweenService:Create(self.selectedObject, tweenInfo, goals)
        self.currentTween:Play()
        
        -- Auto-reset after completion
        self.currentTween.Completed:Connect(function()
            task.wait(0.1)
            self:ResetToOriginal()
        end)
    end
end

function TweenGeneratorUI:StopPreview()
    if self.currentTween then
        self.currentTween:Cancel()
        self.currentTween = nil
        self:ResetToOriginal()
    end
end

function TweenGeneratorUI:SaveOriginalProperties()
    if not self.selectedObject then return end
    
    self.originalProperties = {}
    for propertyName, _ in pairs(self.endProperties) do
        self.originalProperties[propertyName] = self.selectedObject[propertyName]
    end
end

function TweenGeneratorUI:ResetToOriginal()
    if not self.selectedObject or not self.originalProperties then return end
    
    for propertyName, value in pairs(self.originalProperties) do
        self.selectedObject[propertyName] = value
    end
end

function TweenGeneratorUI:ExportCode()
    if not self.selectedObject then
        warn("No object selected for export")
        return
    end
    
    if not self.endProperties or not next(self.endProperties) then
        warn("No properties configured for tweening. Please set some target values first.")
        return
    end
    
    local code = CodeExporter.GenerateCode(
        self.selectedObject,
        self.duration,
        self.easingStyle,
        self.easingDirection,
        self.repeatCount,
        self.reverses,
        self.delay,
        self.endProperties
    )
    
    -- Try to copy to clipboard (if Studio allows it)
    local success = pcall(function()
        game:GetService("GuiService"):SetClipboard(code)
    end)
    
    if success then
        print("✅ Tween code copied to clipboard!")
    else
        print("=== TWEEN CODE (Copy manually) ===")
        print(code)
        print("=== END TWEEN CODE ===")
    end
    
    -- Provide user feedback
    print("Generated tween for: " .. self.selectedObject.Name)
    print("Properties tweened: " .. table.concat(self:GetPropertyNames(), ", "))
end

function TweenGeneratorUI:GetPropertyNames()
    local names = {}
    for propertyName, _ in pairs(self.endProperties or {}) do
        table.insert(names, propertyName)
    end
    return names
end

function TweenGeneratorUI:UpdatePropertyStatus(propertyName, isConfigured)
    local statusIndicator = self.propertyFrame:FindFirstChild(propertyName .. "Status")
    if statusIndicator then
        if isConfigured then
            statusIndicator.Text = "●"
            statusIndicator.TextColor3 = Color3.fromRGB(76, 175, 80) -- Green
        else
            statusIndicator.Text = "○"
            statusIndicator.TextColor3 = Color3.fromRGB(100, 100, 100) -- Gray
        end
    end
end

function TweenGeneratorUI:SavePreset(name)
    local presetData = {
        duration = self.duration,
        delay = self.delay,
        repeatCount = self.repeatCount,
        reverses = self.reverses,
        easingStyle = self.easingStyle.Name,
        easingDirection = self.easingDirection.Name,
        endProperties = self.endProperties
    }
    
    PresetManager.SavePreset(self.plugin, name, presetData)
    print("Preset saved: " .. name)
end

function TweenGeneratorUI:Cleanup()
    self:StopPreview()
    if self.widget then
        self.widget:Destroy()
    end
end

-- ========================================
-- PLUGIN INITIALIZATION
-- ========================================

-- Create toolbar
local toolbar = plugin:CreateToolbar("Tween Generator Pro")

-- Create button
local button = toolbar:CreateButton(
    "Tween Generator",
    "Open Tween Generator Pro",
    "rbxasset://textures/DevConsole/Close.png"
)

-- Create DockWidget
local widgetInfo = DockWidgetPluginGuiInfo.new(
    Enum.InitialDockState.Float,
    false, -- InitialEnabled
    false, -- InitialEnabledShouldOverrideRestore
    400,   -- FloatingXSize
    600,   -- FloatingYSize
    300,   -- MinWidth
    400    -- MinHeight
)

local widget = plugin:CreateDockWidgetPluginGui("TweenGeneratorPro", widgetInfo)
widget.Title = pluginName

-- Initialize UI
local tweenGeneratorUI = TweenGeneratorUI.new(widget, plugin)

-- Toggle widget when button is clicked
button.Click:Connect(function()
    widget.Enabled = not widget.Enabled
end)

-- Handle widget close
widget:GetPropertyChangedSignal("Enabled"):Connect(function()
    if not widget.Enabled then
        tweenGeneratorUI:StopPreview()
    end
end)

-- Handle plugin unloading
plugin.Unloading:Connect(function()
    tweenGeneratorUI:Cleanup()
end) 