-- CodeExporter.lua
-- Generates clean, ready-to-use Lua code for TweenService

local CodeExporter = {}

-- Function to generate complete tween code
function CodeExporter.GenerateCode(targetObject, duration, easingStyle, easingDirection, repeatCount, reverses, delay, goalProperties)
    if not targetObject or not goalProperties or not next(goalProperties) then
        return "-- No valid object or properties specified"
    end
    
    local lines = {}
    
    -- Add header comment
    table.insert(lines, "-- Generated by Tween Generator Pro")
    table.insert(lines, "-- Object: " .. targetObject.Name .. " (" .. targetObject.ClassName .. ")")
    table.insert(lines, "")
    
    -- Add required services
    table.insert(lines, "local TweenService = game:GetService(\"TweenService\")")
    table.insert(lines, "")
    
    -- Add object reference
    local objectPath = CodeExporter.GenerateObjectPath(targetObject)
    table.insert(lines, "-- Reference to the object to tween")
    table.insert(lines, "local targetObject = " .. objectPath)
    table.insert(lines, "")
    
    -- Add TweenInfo creation
    table.insert(lines, "-- Create TweenInfo")
    table.insert(lines, "local tweenInfo = TweenInfo.new(")
    table.insert(lines, "    " .. duration .. ", -- Duration")
    table.insert(lines, "    Enum.EasingStyle." .. easingStyle.Name .. ", -- EasingStyle")
    table.insert(lines, "    Enum.EasingDirection." .. easingDirection.Name .. ", -- EasingDirection")
    table.insert(lines, "    " .. repeatCount .. ", -- RepeatCount")
    table.insert(lines, "    " .. tostring(reverses) .. ", -- Reverses")
    table.insert(lines, "    " .. delay .. " -- DelayTime")
    table.insert(lines, ")")
    table.insert(lines, "")
    
    -- Add goal properties
    table.insert(lines, "-- Goal properties")
    table.insert(lines, "local goals = {")
    
    for propertyName, value in pairs(goalProperties) do
        local valueString = CodeExporter.ValueToString(value)
        table.insert(lines, "    " .. propertyName .. " = " .. valueString .. ",")
    end
    
    table.insert(lines, "}")
    table.insert(lines, "")
    
    -- Add tween creation and play
    table.insert(lines, "-- Create and play the tween")
    table.insert(lines, "local tween = TweenService:Create(targetObject, tweenInfo, goals)")
    table.insert(lines, "tween:Play()")
    table.insert(lines, "")
    
    -- Add optional event connections
    table.insert(lines, "-- Optional: Connect to tween events")
    table.insert(lines, "-- tween.Completed:Connect(function()")
    table.insert(lines, "--     print(\"Tween completed!\")")
    table.insert(lines, "-- end)")
    
    return table.concat(lines, "\n")
end

-- Function to generate a path to the object from common parent locations
function CodeExporter.GenerateObjectPath(object)
    if not object then return "nil" end
    
    -- Try to find a reasonable path from common services
    local workspace = game:GetService("Workspace")
    local players = game:GetService("Players")
    local replicatedStorage = game:GetService("ReplicatedStorage")
    local starterGui = game:GetService("StarterGui")
    local starterPlayer = game:GetService("StarterPlayer")
    
    -- Check if object is in Workspace
    if object:IsDescendantOf(workspace) then
        local path = CodeExporter.GetRelativePath(object, workspace, "game.Workspace")
        if path then return path end
    end
    
    -- Check if object is in ReplicatedStorage
    if object:IsDescendantOf(replicatedStorage) then
        local path = CodeExporter.GetRelativePath(object, replicatedStorage, "game:GetService(\"ReplicatedStorage\")")
        if path then return path end
    end
    
    -- Check if object is in StarterGui
    if object:IsDescendantOf(starterGui) then
        local path = CodeExporter.GetRelativePath(object, starterGui, "game:GetService(\"StarterGui\")")
        if path then return path end
    end
    
    -- Check if object is in StarterPlayer
    if object:IsDescendantOf(starterPlayer) then
        local path = CodeExporter.GetRelativePath(object, starterPlayer, "game:GetService(\"StarterPlayer\")")
        if path then return path end
    end
    
    -- Check if it's a local player's character or GUI
    local localPlayerPath = CodeExporter.GetLocalPlayerPath(object)
    if localPlayerPath then return localPlayerPath end
    
    -- Default to script.Parent assumption (most common for local scripts)
    return "script.Parent -- Adjust this path to your object"
end

-- Function to get relative path from a parent to the object
function CodeExporter.GetRelativePath(object, parent, parentString)
    if object == parent then
        return parentString
    end
    
    local path = {}
    local current = object
    
    while current and current ~= parent do
        -- Use quotes around names that aren't valid identifiers or contain special characters
        local name = current.Name
        if CodeExporter.IsValidIdentifier(name) then
            table.insert(path, 1, name)
        else
            table.insert(path, 1, "[\"" .. name .. "\"]")
        end
        current = current.Parent
    end
    
    if current == parent then
        local pathString = parentString
        for _, segment in ipairs(path) do
            if segment:sub(1, 1) == "[" then
                pathString = pathString .. segment
            else
                pathString = pathString .. "." .. segment
            end
        end
        return pathString
    end
    
    return nil
end

-- Function to generate path for local player related objects
function CodeExporter.GetLocalPlayerPath(object)
    local players = game:GetService("Players")
    
    -- Check if it's related to a player
    for _, player in pairs(players:GetPlayers()) do
        if object:IsDescendantOf(player) then
            local path = CodeExporter.GetRelativePath(object, player, "game:GetService(\"Players\").LocalPlayer")
            if path then return path end
        end
    end
    
    return nil
end

-- Function to check if a string is a valid Lua identifier
function CodeExporter.IsValidIdentifier(str)
    if not str or str == "" then return false end
    
    -- Check if it starts with a letter or underscore
    local firstChar = str:sub(1, 1)
    if not firstChar:match("[a-zA-Z_]") then return false end
    
    -- Check if all characters are alphanumeric or underscore
    if not str:match("^[a-zA-Z_][a-zA-Z0-9_]*$") then return false end
    
    -- Check if it's a Lua keyword
    local keywords = {
        "and", "break", "do", "else", "elseif", "end", "false", "for", "function",
        "if", "in", "local", "nil", "not", "or", "repeat", "return", "then",
        "true", "until", "while"
    }
    
    for _, keyword in ipairs(keywords) do
        if str == keyword then return false end
    end
    
    return true
end

-- Function to convert a value to its string representation
function CodeExporter.ValueToString(value)
    local valueType = typeof(value)
    
    if valueType == "Vector3" then
        return string.format("Vector3.new(%.3f, %.3f, %.3f)", value.X, value.Y, value.Z)
    elseif valueType == "UDim2" then
        return string.format("UDim2.new(%.3f, %d, %.3f, %d)", 
            value.X.Scale, value.X.Offset, value.Y.Scale, value.Y.Offset)
    elseif valueType == "Color3" then
        -- Convert to RGB values
        local r = math.floor(value.R * 255 + 0.5)
        local g = math.floor(value.G * 255 + 0.5)
        local b = math.floor(value.B * 255 + 0.5)
        return string.format("Color3.fromRGB(%d, %d, %d)", r, g, b)
    elseif valueType == "CFrame" then
        local x, y, z = value.Position.X, value.Position.Y, value.Position.Z
        local rx, ry, rz = value:ToEulerAnglesXYZ()
        return string.format("CFrame.new(%.3f, %.3f, %.3f) * CFrame.Angles(%.3f, %.3f, %.3f)", 
            x, y, z, rx, ry, rz)
    elseif valueType == "number" then
        return tostring(value)
    elseif valueType == "boolean" then
        return tostring(value)
    elseif valueType == "string" then
        return "\"" .. value .. "\""
    else
        return "nil -- Unsupported type: " .. valueType
    end
end

-- Function to generate a complete script file
function CodeExporter.GenerateScriptFile(targetObject, duration, easingStyle, easingDirection, repeatCount, reverses, delay, goalProperties, scriptType)
    scriptType = scriptType or "LocalScript"
    
    local lines = {}
    
    -- Add script type comment
    if scriptType == "LocalScript" then
        table.insert(lines, "-- This is a LocalScript - place it in StarterPlayerScripts, StarterGui, or as a child of the object")
    else
        table.insert(lines, "-- This is a Script - place it in ServerScriptService or as a child of the object")
    end
    table.insert(lines, "")
    
    -- Add the main tween code
    local tweenCode = CodeExporter.GenerateCode(targetObject, duration, easingStyle, easingDirection, repeatCount, reverses, delay, goalProperties)
    table.insert(lines, tweenCode)
    
    return table.concat(lines, "\n")
end

-- Function to generate a ModuleScript version
function CodeExporter.GenerateModuleScript(targetObject, duration, easingStyle, easingDirection, repeatCount, reverses, delay, goalProperties)
    local lines = {}
    
    table.insert(lines, "-- Tween Module Generated by Tween Generator Pro")
    table.insert(lines, "-- Usage: local TweenModule = require(this.module)")
    table.insert(lines, "--        TweenModule.PlayTween(targetObject)")
    table.insert(lines, "")
    table.insert(lines, "local TweenService = game:GetService(\"TweenService\")")
    table.insert(lines, "")
    table.insert(lines, "local TweenModule = {}")
    table.insert(lines, "")
    table.insert(lines, "-- Tween configuration")
    table.insert(lines, "local TWEEN_INFO = TweenInfo.new(")
    table.insert(lines, "    " .. duration .. ", -- Duration")
    table.insert(lines, "    Enum.EasingStyle." .. easingStyle.Name .. ", -- EasingStyle")
    table.insert(lines, "    Enum.EasingDirection." .. easingDirection.Name .. ", -- EasingDirection")
    table.insert(lines, "    " .. repeatCount .. ", -- RepeatCount")
    table.insert(lines, "    " .. tostring(reverses) .. ", -- Reverses")
    table.insert(lines, "    " .. delay .. " -- DelayTime")
    table.insert(lines, ")")
    table.insert(lines, "")
    table.insert(lines, "local GOALS = {")
    
    for propertyName, value in pairs(goalProperties) do
        local valueString = CodeExporter.ValueToString(value)
        table.insert(lines, "    " .. propertyName .. " = " .. valueString .. ",")
    end
    
    table.insert(lines, "}")
    table.insert(lines, "")
    table.insert(lines, "function TweenModule.PlayTween(targetObject)")
    table.insert(lines, "    if not targetObject then")
    table.insert(lines, "        warn(\"No target object provided\")")
    table.insert(lines, "        return nil")
    table.insert(lines, "    end")
    table.insert(lines, "    ")
    table.insert(lines, "    local tween = TweenService:Create(targetObject, TWEEN_INFO, GOALS)")
    table.insert(lines, "    tween:Play()")
    table.insert(lines, "    return tween")
    table.insert(lines, "end")
    table.insert(lines, "")
    table.insert(lines, "return TweenModule")
    
    return table.concat(lines, "\n")
end

return CodeExporter 